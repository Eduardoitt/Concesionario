//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace concesionario.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ConsecionarioDeAutosEntities : DbContext
    {
        public ConsecionarioDeAutosEntities()
            : base("name=ConsecionarioDeAutosEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Anio> Anio { get; set; }
        public virtual DbSet<Auto_Adiccionales> Auto_Adiccionales { get; set; }
        public virtual DbSet<AutoExistencia> AutoExistencia { get; set; }
        public virtual DbSet<Autos> Autos { get; set; }
        public virtual DbSet<Aval> Aval { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Color> Color { get; set; }
        public virtual DbSet<Consecionario> Consecionario { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<EmpleadoSucursal> EmpleadoSucursal { get; set; }
        public virtual DbSet<Modelo> Modelo { get; set; }
        public virtual DbSet<Partes> Partes { get; set; }
        public virtual DbSet<PartesInventario> PartesInventario { get; set; }
        public virtual DbSet<PartesPrecio> PartesPrecio { get; set; }
        public virtual DbSet<PartesPrecioBitacora> PartesPrecioBitacora { get; set; }
        public virtual DbSet<Performance> Performance { get; set; }
        public virtual DbSet<Sucursal> Sucursal { get; set; }
        public virtual DbSet<TipoEmpleado> TipoEmpleado { get; set; }
        public virtual DbSet<VentaAuto> VentaAuto { get; set; }
        public virtual DbSet<VentaParte> VentaParte { get; set; }
    
        public virtual int AutosAlta(string marca, Nullable<int> idColor, Nullable<int> idModelo, Nullable<int> idAnio, Nullable<decimal> precio)
        {
            var marcaParameter = marca != null ?
                new ObjectParameter("Marca", marca) :
                new ObjectParameter("Marca", typeof(string));
    
            var idColorParameter = idColor.HasValue ?
                new ObjectParameter("IdColor", idColor) :
                new ObjectParameter("IdColor", typeof(int));
    
            var idModeloParameter = idModelo.HasValue ?
                new ObjectParameter("IdModelo", idModelo) :
                new ObjectParameter("IdModelo", typeof(int));
    
            var idAnioParameter = idAnio.HasValue ?
                new ObjectParameter("IdAnio", idAnio) :
                new ObjectParameter("IdAnio", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutosAlta", marcaParameter, idColorParameter, idModeloParameter, idAnioParameter, precioParameter);
        }
    
        public virtual int Caracteristicas(Nullable<int> idAuto, Nullable<int> idPerformace, Nullable<int> idColor)
        {
            var idAutoParameter = idAuto.HasValue ?
                new ObjectParameter("IdAuto", idAuto) :
                new ObjectParameter("IdAuto", typeof(int));
    
            var idPerformaceParameter = idPerformace.HasValue ?
                new ObjectParameter("IdPerformace", idPerformace) :
                new ObjectParameter("IdPerformace", typeof(int));
    
            var idColorParameter = idColor.HasValue ?
                new ObjectParameter("IdColor", idColor) :
                new ObjectParameter("IdColor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Caracteristicas", idAutoParameter, idPerformaceParameter, idColorParameter);
        }
    }
}
